#!/usr/bin/env bash

set -e

MASTER=int/4.0.0.0
BRANCHCACHE="/tmp/.svnbranch-$USER-branchcache"

branchtourl() {
	svn info | sed -n '/^URL/s,URL: \(.*\)'"$CURRENT"'\(.*\),\1'"$1"'\2,p'
}

branchexists() {
	exists=1
	branch="$1"
	for i in $BRANCHES; do
		if [ "$i" = "$branch" ]; then
			exists=0
		fi
	done
	return $exists
}

usage() {
	echo "Usage: svnbranch [--new <branch>|--delete <branch>|--merge <branch>|<branch>|--update|--rebase <my branch> <their branch>|--log [branch] [revision]]"
}
merge() {
	MERGE="$1"
	REV="$2"
	URL="`svn info | sed -n '/^URL/s,URL: \(.*\)'"$CURRENT"'\(.*\),\1'"$MERGE"'\2,p'`"

	echo -n "Merging branch $MERGE onto $CURRENT (url = $URL)"
	if [ -z "$REV" ]; then
		simpleMerge -q "$URL"
	else
		simpleMerge -q "$URL@$REV"
	fi
	echo "."
}
rebase() {
	REBASE="$1"
	REBASESRC="$2"
	URL="`svn info | sed -n '/^URL/s,URL: \(.*\)'"$CURRENT"'\(.*\),\1'"$REBASE"'\2,p'`"

	if [ "${ROOT:0:4}" = "svn:" ]; then
		WRITABLE="`sed 's/svn:/http:/;s,$,/dev,' <<< "$ROOT"`"
	else
		WRITABLE="$ROOT"
	fi
	
	echo -n "Getting latest revision on $REBASE"
	svn switch "$URL"
	REV="`svn info | sed -n '/^Revision/s/.*: //p'`"
	echo "."

	echo -n "Deleting branch $REBASE"
	svn rm "$WRITABLE/branches/$REBASE" -m"Rebasing $REBASE from $REBASESRC"
	echo "."

	echo -n "Rebranching $REBASE from $REBASESRC"
	svn cp "$WRITABLE/branches/$REBASESRC" "$WRITABLE/branches/$REBASE" -m"Rebasing $REBASE from $REBASESRC"
	svn switch "$URL"
	echo "."

	echo -n "Merging forward $REBASE changes to $REBASESRC"
	simpleMerge -q "$URL@$REV"
	echo "."
}
create() {
	NEW="$1"
	BASIS="$2"
	if [ "${ROOT:0:4}" = "svn:" ]; then
		WRITABLE="`sed 's/svn:/http:/;s,$,/dev,' <<< "$ROOT"`"
		echo -n "Switching to writable repository"
		svn switch --relocate "$ROOT" "$WRITABLE"
		echo "."
		OLDROOT="$ROOT"
		ROOT="$WRITABLE"
	fi

	echo -n "Creating branch $NEW from $BASIS"
	svn cp -m"Creating new branch $NEW based on $BASIS" "$ROOT/branches/$BASIS" "$ROOT/branches/$NEW"
	echo "."

	if [ -n "$WRITABLE" ]; then	
		echo -n "Switching back to read-only repository"
		svn switch --relocate "$WRITABLE" "$OLDROOT"
		echo "."
		ROOT="$OLDROOT"
	fi

}
delete() {
	DEL="$1"
	
	if [ "${ROOT:0:4}" = "svn:" ]; then
		WRITABLE="`sed 's/svn:/http:/;s,$,/dev,' <<< "$ROOT"`"
	else
		WRITABLE="$ROOT"
	fi
	
	echo "Deleting branch $DEL"
	echo "Will execute svn rm $WRITABLE/branches/$DEL"
	echo -n "Are you sure? [y|N]: "
	read r
	
	if [ "y" = "$r" ] || [ "Y" = "$r" ]; then
		echo "Deleting"
		svn rm -m"Deleting branch $DEL" "$WRITABLE/branches/$DEL"
		echo "."
	else
		echo "Cancelled."
	fi
}
switch() {
	SW="$1"
	echo -n "Switching to branch $SW: "
	URL="`svn info | sed -n '/^URL/s,URL: \(.*\)'"$CURRENT"'\(.*\),\1'"$SW"'\2,p'`"
	svn switch "$URL"
}

update() {
	svn ls "$ROOT/branches/dev" | sed 's,^,dev/,;s/.$//' > "$BRANCHCACHE"
	svn ls "$ROOT/branches/int" | sed 's,^,int/,;s/.$//' >> "$BRANCHCACHE"
	svn ls "$ROOT/branches/releases" | sed 's,^,releases/,;s/.$//' >> "$BRANCHCACHE"
	BRANCHES="`cat "$BRANCHCACHE"`"
}

parselogoutput() {
	while read line; do 
		if grep '^r[0-9]' &>/dev/null <<< "$line"; then
			revision=$(sed 's,r\([0-9]*\) .*,\1,' <<< "$line")
			revision=$(( $revision - 2 ))
			echo $revision
		fi
	done | tail -n1
}

log() {
	branch=$1

	if ! branchexists "$branch"; then
		echo "Branch $branch does not exist"
		exit 1
	fi
	revision=$2
	URL="$(branchtourl "$branch")"
	while true; do
		set +e
		OUTPUT=$(svn log --stop-on-copy "$URL@$revision" 2>/dev/null)
		RV=$?
		set -e
		if [ "0" != "$RV" ]; then break; fi
		echo "$OUTPUT"

		revision=$(echo "$OUTPUT" | parselogoutput)
	done
}

if ! [ -d .svn ]; then
	echo "Not in an svn repository"
	exit 1
fi

ROOT="`svn info | sed -n '/^Repository Root:/s/[^:]*: //p'`"
CURRENT="`svn info | sed -n "/^URL/s,URL: $ROOT/branches/\([^/]*/[^/]*\)/\{0\,1\}.*,\1,p"`"
if ! [ -f "$BRANCHCACHE" ]; then
	svn ls "$ROOT/branches/dev" | sed 's,^,dev/,;s/.$//' > "$BRANCHCACHE"
	svn ls "$ROOT/branches/int" | sed 's,^,int/,;s/.$//' >> "$BRANCHCACHE"
fi
BRANCHES="`cat "$BRANCHCACHE"`"
case $1 in 
	"")
		echo "Branches:"
		# list all branches
		# hilight current
		for i in $BRANCHES; do
			if [ "$i" == "$CURRENT" ]; then
				echo '* ' $i
			else
				echo "   $i"
			fi
		done
	;;
	"--update"|"-u")
		update
	;;
	"-m"|"-M"|"--merge")
		update
		if [ -z "$2" ]; then
			usage
			exit 1
		fi
		MERGE="`sed 's,/*$,,' <<< $2`"
		MERGEBRANCH="`sed 's,@.*$,,' <<< $MERGE`"
		REV="`sed 's,^.*@,,' <<< $MERGE`"
		if [ "$REV" == "$MERGEBRANCH" ]; then 
			REV= 
			if ! branchexists "$MERGEBRANCH"; then
				echo "Branch $MERGE does not exist, cannot merge it"
				exit 1
			fi
		else
			if ! svn ls $ROOT/branches/$MERGEBRANCH@$REV &>/dev/null; then
				echo "Branch $MERGEBRANCH does not exist at revision $REV, cannot merge it"
				exit 1
			fi			
		fi
		if [ "$CURRENT" == "$MERGE" ]; then
			echo "Already on branch $2"
			exit 1
		fi
		
		merge "$MERGEBRANCH" "$REV"
		update
	;;
	"--rebase")
		update
		if [ -z "$3" ]; then
			usage
			exit 1
		fi
		REBASE="`sed 's,/*$,,' <<< $2`"
		REBASESRC="`sed 's,/*$,,' <<< $3`"
		REBASESRCBRANCH="`sed 's,@.*$,,' <<< $REBASESRC`"
		if grep "^int" &>/dev/null <<< "$REBASE" ; then
			echo "Looks like you are trying to rebase an integration branch. You probably don't want to do this!"
			exit 1
		fi
		if ! branchexists "$REBASE"; then
			echo "Branch $REBASE does not exist, cannot rebase"
			exit 1
		fi
		if ! branchexists "$REBASESRCBRANCH"; then
			echo "Branch $REBASESRC does not exist, cannot rebase"
			exit 1
		fi
		
		rebase "$REBASE" "$REBASESRC"
		update
	;;
	"--log")
		if [ -n "$2" ]; then branch="$2"
		else branch="$CURRENT"; fi
		if [ -n "$3" ]; then revision="$3"
		else revision=HEAD; fi
		log "$branch" "$revision"
	;;
	"-c"|"-C"|"--create"|"-n"|"-N"|"--new")
		update
		if [ -z "$2" ]; then
			usage
			exit 1
		fi
		NEW="`sed 's,/*$,,' <<< $2`"
		if [ "$CURRENT" == "$NEW" ]; then
			echo "Already on branch $2"
			exit 1
		fi
		if [ -n "$3" ]; then
			BASIS="`sed 's,/*$,,' <<< $3`"
		else 
			BASIS="$CURRENT"
		fi
		if branchexists "$NEW"; then
			echo "Branch $NEW already exists"
			exit 1
		fi
		if ! branchexists "$BASIS"; then
			echo "Branch $BASIS does not exist, cannot copy from it"
			exit 1
		fi
		if [ "${NEW:0:4}" != "dev/" ]; then
			echo "Branch not under dev/; cannot create"
			exit 1
		fi
		
	   # create a branch
	   # and _don't_ switch to it
		create "$NEW" "$BASIS"
		#switch "$NEW"
		update
		echo "."
	;;
	"-d"|"-D"|"--delete"|"-r"|"-R"|"--remove")
		if [ -z "$2" ]; then
			usage
			exit 1
		fi
		DEL="`sed 's,/*$,,' <<< $2`"
		for i in $BRANCHES; do
			if [ "$i" == "$DEL" ]; then
				# delete a branch
				delete "$DEL"
				# switch back to $MASTER
				if [ "$CURRENT" == "$DEL" ]; then
					switch "$MASTER"
				fi
				update
				exit 0
			fi
		done
		echo "Branch $DEL does not exist"
		exit 1
	;;
	"-"*)
		usage
		exit 0
	;;
	*)
		update
		SW="`sed 's,/*$,,' <<< $1`"
		if [ "$CURRENT" == "$SW" ]; then
			echo "Already on branch $SW"
			exit 1
		fi
		for i in $BRANCHES; do
			if [ "$i" == "$SW" ]; then
				switch "$SW"
				exit 0
			fi
		done
		echo "Branch $SW does not exist"
		exit 1
	;;
esac

